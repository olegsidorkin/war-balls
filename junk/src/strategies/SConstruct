# vim: filetype=python

AddOption('--debug-build',
          default = False,
          action = 'store_true',
          help = 'Build in debug mode.'
         )
AddOption('--use-asan',
          default = False,
          action = 'store_true',
          help = 'Use AddressSanitizer.'
         )
AddOption('--use-tsan',
          default = False,
          action = 'store_true',
          help = 'Use ThreadSanitizer.'
         )
AddOption('--static-analysis',
          default = False,
          action = 'store_true',
          help = 'Use Clang code static analysis.'
         )
debug_mode = GetOption('debug_build')
use_asan = GetOption('use_asan')
use_tsan = GetOption('use_tsan')
static_analysis = GetOption('static_analysis')

import os

project_root = os.path.abspath('../../')
build_subdir = 'debug' if debug_mode else 'release'


cpp_path = ['include'
           ]
cpp_path = [os.path.join(project_root, x) for x in cpp_path]


cpp_flags = ['-Wall',
             '-Wextra',
             '-pedantic',
             '-std=c++11',
             '-pthread'
            ]
if debug_mode:
    cpp_flags.append(['-g'])
else:
    cpp_flags.append(['-O2'])

if use_asan:
    cpp_flags.append(['-fno-omit-frame-pointer',
                      '-fno-optimize-sibling-calls',
                      '-fsanitize=address'
                     ]
                    )
if use_tsan:
    cpp_flags.append(['-fsanitize=thread'
                     ]
                    )
if static_analysis:
    cpp_flags.append(['--analyze'])
compiler = 'g++-4.9'


env = Environment(CXX = compiler,
                  CPPFLAGS = cpp_flags,
                  CPPPATH = cpp_path
                 )

SConscript('SConscript',
           variant_dir = build_subdir,
           exports=['env']
          )
